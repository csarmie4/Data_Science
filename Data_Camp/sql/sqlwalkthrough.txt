======================= BASICS (done in terminal)

# show databases
SHOW DATABASES;

# Creating a database
CREATE DATABASE myapp;

# Deleting a database
DROP DATABASE myapp;

# using a database
USE myapp;


====================== COMMON KEYWORDS

#count 
SELECT COUNT(field_names);
SELECT COUNT(*);
SELECT COUNT(field_names) AS total FROM table;
SELECT COUNT(language) AS count_languages, COUNT(country) AS count_countries
FROM films;


====================== FIRST TABLE

# creating a table
CREATE TABLE users(
	id INT AUTO_INCREMENT,
	first_name VARCHAR(100),
	last_name VARCHAR(100),
	email VARCHAR(100),
	password VARCHAR(255),
	location VARCHAR(100),
	is_admin TINYINT(1),
	created_at DATETIME,
	PRIMARY KEY(id)
);

# deleting a table
DROP TABLE users;

# show all tables
SHOW TABLES;

# inserting a row
INSERT INTO users (first_name, last_name, email, password, location, is_admin, created_at) VALUES ("Micahel", "Connelly", "mrc7197@gmail.com", "12345", "Maryland", 1, now());

# insert multiple rows
INSERT INTO users (first_name, last_name, email, password, location, is_admin, created_at)
	VALUES ('John', 'Doe', 'john@gmail.com', '123456', 'New York', 0, now()),
	('Jane', 'Doe', 'jane@gmail.com', '123456', 'New York', 0, now()),
	('Ash', 'Ketchum', 'ash@gmail.com', '123456', 'Maryland', 1, now()),
	('Steve', 'Rodgers', 'steve@gmail.com', '123456', 'Maryland', 0, now()),
	('Harry', 'Potter', 'harry@gmail.com', '123456', 'UK', 0, now());


=================== SELECTING

# select
SELECT * FROM users;
SELECT first_name, last_name FROM users;

# select where
SELECT * FROM users WHERE id = 1;
SELECT * FROM users WHERE id BETWEEN 1 and 5;
SELECT * FROM users WHERE email = 'john@gmail.com';
SELECT * FROM users WHERE location = "Maryland";
SELECT * FROM users WHERE location = "Maryland" AND is_admin = 1;

# where vs having
WHERE filters individual records, HAVING filters grouped records
SELECT release_year FROM films GROUP BY release_year HAVING AVG(duration) > 120;

# view
CREATE VIEW new_name AS SELECT id, name, year_hired FROM employees;

# grouping results
SELECT certification, COUNT(title) FROM films GROUP BY certification;

# sorting results
SELECT * FROM users ORDER BY last_name ASC; #ASC is default, DESC is decending

# concatenate columns and select
SELECT CONCAT(first_name, ' ', last_name) AS 'name' FROM users;
SELECT CONCAT(first_name, ' ', last_name) AS 'name', location FROM users;

# select distinct values
SELECT DISTINCT location FROM users;
SELECT COUNT(DISTINCT country) AS count_distinct_countries
FROM films;

# select like
SELECT * FROM users WHERE location LIKE 'm%'; # return if field starts with m
SELECT * FROM users WHERE location LIKE '%r%';
SELECT * FROM users WHERE location NOT LIKE '%r%';
SELECT * FROM users WHERE location LIKE 'm_'; # matches a single character

# select in
SELECT * FROM users WHERE location IN ("Maryland", "New York");

# select null fields
WHERE birthday IS NULL;

# order to write code
SELECT, FROM, GROUP BY, HAVING, ORDER BY, LIMIT

================== DELETING AND UPDATING

# delete
DELETE FROM users WHERE id = 2;

# update row
UPDATE users SET location = "California" WHERE id = 1;


================== ALTERING A TABLE

# add a new column to a table
ALTER TABLE users ADD age VARCHAR(3);

# modify an existing columns data type
ALTER TABLE users MODIFY COLUMN age INT(3);


================== FOREIGN KEY TABLES

# foreign keys
CREATE TABLE posts(
	id INT AUTO_INCREMENT,
	user_id INT,
	title VARCHAR(100),
	body TEXT,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id),
	FOREIGN KEY(user_id) REFERENCES users(id)
);

# insert into posts
INSERT INTO posts(user_id, title, body)
	VALUES (1, 'Post One', 'This is post one'),
	(3, 'Post Two', 'This is post two'),
	(1, 'Post Three', 'This is post three'),
	(2, 'Post Four', 'This is post four'),
	(5, 'Post Five', 'This is post five'),
	(4, 'Post Six', 'This is post six'),
	(2, 'Post Seven', 'This is post seven'),
	(1, 'Post Eight', 'This is post eight'), 
	(3, 'Post Nine', 'This is post none'),
	(4, 'Post Ten', 'This is post ten');

# select join
SELECT
	users.first_name,
	users.last_name,
	posts.title,
	posts.created_at
FROM users INNER JOIN posts
ON users.id = posts.user_id;

# left join
SELECT 
    c1.name AS city, 
    code, 
    c2.name AS country,
    region, 
    city_proper_pop
FROM cities AS c1
-- Join right table (with alias)
LEFT JOIN countries AS c2
ON c1.country_code = c2.code
ORDER BY code DESC;

# cross join
# CROSS JOIN creates all possible combinations of two tables

======================= MULTIPLE FOREIGN KEYS

# create comments table
CREATE TABLE comments(
	id INT AUTO_INCREMENT,
    post_id INT,
    user_id INT,
    body TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(post_id) REFERENCES posts(id)
);

# insert into comments
INSERT INTO comments(post_id, user_id, body)
	VALUES (11, 3, 'This is comment one'),
	(12, 1, 'This is comment two'),
	(15, 3, 'This is comment three'),
	(12, 4, 'This is comment four'),
	(13, 1, 'This is comment six'),
	(15, 4, 'This is comment seven'),
	(12, 3, 'This is comment seven');

# joining multiple tables
SELECT
	comments.body,
	posts.title
FROM comments LEFT JOIN posts
ON posts.id = comments.post_id
ORDER BY posts.title;

SELECT
	comments.body,
	posts.title
FROM comments RIGHT JOIN posts
ON posts.id = comments.post_id
ORDER BY posts.title;

SELECT
	comments.body,
	posts.title,
	users.first_name,
	users.last_name
FROM comments
INNER JOIN posts ON posts.id = comments.post_id
INNER JOIN users ON users.id = comments.user_id
ORDER BY posts.title;


======================= Other joins

# union
# UNION takes two tables as input, and returns all records from both tables. Does not include duplicates
# UNION ALL does include duplicates
SELECT * FROM left_table UNION SELECT * FROM right_table;

# intersect
SELECT id, val FROM left_table INTERSECT SELECT id, val FROM right_table;

# except
# allows us to identify records that are present in the left table but not the right
SELECT monarch, country FROM monarchs EXCEPT SELECT prime_minister, country FROM prime_ministers;


======================= Subqueries

# semi-join 
SELECT president, country, continent FROM presidents WHERE country IN 
(SELECT country FROM states WHERE indep_year < 1800);

# anti-join
SELECT president, country FROM presidents WHERE country LIKE '%America' AND country NOT IN 
(SELECT country FROM states WHERE indep_year < 1800);

# subquieries inside select
SELECT DISTNINCT continent, (SELECT COUNT(*) FROM monarchs WHERE states.continent = monarch.continent) 
AS monarch_count FROM states;

# subquieries inside from
SELECT DISTINCT monarchs.continent, sub.most_recent FROM monarchs, 
(SELECT continent, MAX(indep_year) AS most_recent FROM states GROUP BY continent) AS sub
WHERE monarchs.continent = sub.continent ORDER BY continent;

# example with syntax
-- Select fields from cities
SELECT 
  name, 
  country_code, 
  city_proper_pop, 
  metroarea_pop,
  city_proper_pop / metroarea_pop * 100 AS city_perc
FROM cities
-- Use subquery to filter city name
WHERE name IN
  (SELECT capital
  FROM countries
  WHERE (continent = 'Europe'
  OR continent LIKE '%America'))
-- Add filter condition such that metroarea_pop does not have null values
  AND metroarea_pop IS NOT NULL
-- Sort and limit the result
ORDER BY city_perc DESC
LIMIT 10;